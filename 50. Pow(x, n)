Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

//java solution
public class q50Pow {

	public static void main(String[] args) {
		double x=2.00000;
		int n=10;
		double res=myPow(x,n);
		System.out.println(res);
		System.out.println(powBruteforce(x,n));
		

	}
	private static double powBruteforce(double x, int n) {
		// taking time complexity = O(n)
		double ans=1.0;
		int temp=n;
		if(temp<0) temp=temp*-1;
		for(int i=0;i<temp;i++) {
			ans=ans*x;
		}
		if(n<0)
			ans=(double)(1.0)/(double)(ans);
		return ans;
	}
  
  //optimal solution
	public static double myPow(double x, int n) {
  // taking time complexity = O(logn)
        double ans=1.0;
        long temp=n;
        if(temp<0)
            temp=temp*-1;
        
        while(temp>0){
            if(temp%2==1){
                ans=ans*x;
                temp=temp-1;
            }else{
                x=x*x;
                temp=temp/2;
            }
                
        }
        if(n<0)
            ans=(double)(1.0)/(double)(ans);
        
        return ans;
    }

}
