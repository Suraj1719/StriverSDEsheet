leetcode : 48
Rotate the given matrix by 90 degree



java solution 


public class q48RotateMatrix {

//rotate matrix by 90 degree
	public static void main(String[] args) {
		int matrix[][]= {{1,2,3},{4,5,6},{7,8,9}};
		rotateBruteForce(matrix);
		rotateOptimally(matrix);
		

	}

	private static void rotateOptimally(int[][] matrix) {
	// in place method taking t.c = O(n^2)
		//space =O(1)
		//here we transpose the given matrix first and then reverse the each row
		
		//transpose
		for(int i=0;i<matrix.length;i++) {
			for(int j=i;j<matrix[0].length;j++) {
				int temp=0;
				temp=matrix[i][j];
				matrix[i][j]=matrix[j][i];
				matrix[j][i]=temp;
			}
		}
		//reverse by two pointer approach
		for(int i=0;i<matrix.length;i++) {
			int left=0;int right=matrix.length-1;
			while(left<=right) {
				int tmp=0;
				tmp=matrix[i][left];
				matrix[i][left]=matrix[i][right];
				matrix[i][right]=tmp;
				left++;
				right--;
			}
		}
		//print the desired matrix
		System.out.println("Rotated matrix is :");
		for(int i=0;i<matrix.length;i++) {
			for(int j=0;j<matrix[0].length;j++) {
				System.out.print(matrix[i][j]+" ");
			}
			System.out.println();
			
		}
	
}


//brute force approach
	private static void rotateBruteForce(int[][] matrix) {
		// by using another matrix ,time complexity=O(n^2)
		//space complexity =O(n^2)
		int col=matrix[0].length-1;
		int ans[][]=new int[matrix.length][matrix[0].length];
		for(int i=0;i<matrix.length;i++) {
			for(int j=0;j<matrix[0].length;j++) {
				ans[j][col]=matrix[i][j];
			}
			col--;
		}
		//print the resulted matrix
		for(int i=0;i<ans.length;i++) {
			for(int j=0;j<ans[0].length;j++) {
				System.out.print(ans[i][j]+" ");
			}
			System.out.println();
			
		}
		
	}

}
